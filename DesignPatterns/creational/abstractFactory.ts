/*
    The Abstract Factory Design Pattern

    Consist of a Factory containing other factories each one
    with entities belonging to the same family or the same kind,
    but with different characteristics.

    The factories inside the abstract class are constraint by the
    interfaces along with the instances generated by the factories.
    The instances of all factories should belong to the same kind.
*/

/*
    The menu producer is the abstract factory in charge of returning
    a MenuFactory that will be later used to get the needed class
*/
class MenuProducer {
    getMenuFactory(type:string) {
        if (type === "round")
            return new RoundMenuFactory();
        else if (type === "straight")
            return new StandardMenuFactory();
    }
}
/*
    Every Factory returned by the abstract Factory
    should be constrained to have the same methds
    to be easy handled by the Abstract Factory
*/
interface MenuFactory {
    getMenu(mode:string): Menu;
}

class StandardMenuFactory implements MenuFactory {
    getMenu(mode:string) {
        if (mode === "dark")
            return new StandardMenu("dark");
        else if (mode == "white")
            return new StandardMenu("White");
    }
}
class RoundMenuFactory implements MenuFactory {
    getMenu(mode:string) {
        if (mode === "dark")
            return new RoundMenu("dark");
        else if (mode === 'white')
            return new RoundMenu("White");
    }
}
/*
    Every Factory returned by the abstract one 
    should be also constrained to have the same
    properties and methods. What changes in this
    case is its characteristics. The way in which
    those attributes are populated and the values
    there.
*/
interface Menu {
    color:string,
    corners:string
}
class StandardMenu implements Menu{
    color: string;
    corners: string;
    constructor(color:string) {
        this.color = color;
        this.corners = "Straight";
    }
}

class RoundMenu implements Menu{
    color: string;
    corners: string;
    constructor(color:string) {
        this.color = color;
        this.corners = "Round";
    }
}

// Example
const menuProducer = new MenuProducer();
const standardFactory = menuProducer.getMenuFactory("straight");
const whiteMenu = standardFactory.getMenu('white');
const blackMenu = standardFactory.getMenu('black');